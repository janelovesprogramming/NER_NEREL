100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00,  9.03it/s]
Some weights of BertForTokenClassification were not initialized from the model checkpoint at google-bert/bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
383 383
287 287
298 298
Map: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 746/746 [00:00<00:00, 2018.90 examples/s]
Map: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████| 93/93 [00:00<00:00, 1412.38 examples/s]
Map: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████| 94/94 [00:00<00:00, 1515.98 examples/s]
/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/accelerate/accelerator.py:432: FutureWarning: Passing the following arguments to `Accelerator` is deprecated and will be removed in version 1.0 of Accelerate: dict_keys(['dispatch_batches', 'split_batches', 'even_batches', 'use_seedable_sampler']). Please pass an `accelerate.DataLoaderConfiguration` instead:
dataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)
  warnings.warn(
  0%|                                                                                                                                  | 0/470 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/home/jane/ner_nerol/src/train.py", line 119, in <module>
    trainer.train()
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/transformers/trainer.py", line 1780, in train
    return inner_training_loop(
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/transformers/trainer.py", line 2118, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/transformers/trainer.py", line 3036, in training_step
    loss = self.compute_loss(model, inputs)
  File "/home/jane/ner_nerol/src/train.py", line 103, in compute_loss
    loss = loss_fct(logits.view(-1, self.model.config.num_labels), labels.view(-1))
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/torch/nn/modules/loss.py", line 1179, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "/home/jane/anaconda3/envs/torch/lib/python3.9/site-packages/torch/nn/functional.py", line 3059, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu! (when checking argument for argument weight in method wrapper_CUDA_nll_loss_forward)